scalar Url
scalar Time
scalar JSON

enum Status{
    STARTED,
    INPROGRESS,
    COMPLETED
}

type Notification {
    id: ID! @constraint(type:"primarykey")
    date: Time
    total:Int @constraint(type:"check",value:"total > 0 ")
    type: String
    status:Status
}

type User {
    id: ID! @constraint(type:"primarykey")
    username: String!
    first_name: String!
    last_name: String!  
    full_name: String!
    name: String! 
    avatar_url: Url!

}

type Stat {
    id: ID! @constraint(type:"primarykey")
    views: Int!
    likes: Int!
    retweets: Int!
    total:Int!
    responses: Int!
}


type Tweet {
    id: ID! @constraint(type:"primarykey")
    body: String!
    date: Time!
    Author: [User]!
    Stats: [Stat]!
    Data:JSON
}


type Meta {
    count: Int!
}

type Post {
    id: ID! @constraint(type:"primarykey")
    title: String!
    text: String
    datePublished: Time
}

type Author {
    id: ID! @constraint(type:"primarykey")
    name: String!
    dob: Time @constraint(type:"default",value:"now()")
    Posts: [Post] @mapping(type:"many2many")
}

type Query {
    Tweet(id: ID!): Tweet
    Tweets(limit: Int, skip: Int, sort_field: String, sort_order: String): [Tweet]
    TweetsMeta: Meta
    User(id: ID!): User
    Notifications(limit: Int): [Notification]
    NotificationsMeta: Meta
}

type Mutation {
    createTweet (
        body: String
        data: JSON
    ): Tweet
    deleteTweet(id: ID!): Tweet
    markTweetRead(id: ID!): Boolean
    notification(total:Int
    type: String
    status:Status):Notification
}

directive @mapping(type: String = "Used for many to many") on FIELD_DEFINITION
directive @constraint(type: String,value: String) on FIELD_DEFINITION


type Blogger {
    id :ID! @constraint(type:"primarykey")
    username: String!
    blogs : [Blog]
    views : Int @constraint(type:"autoincrement")
}

type Blog {
    id :ID! @constraint(type:"primarykey")
    text: String!
}

type Product{
    id :ID! @constraint(type:"primarykey")
    title : String @constraint(type:"primarykey")
    releaseDate: Time

}