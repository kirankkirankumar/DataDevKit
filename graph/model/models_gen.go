// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"gorm.io/gorm"
)

type Author struct {
	ID      int        `json:"id" gorm:"autoIncrement; primaryKey"`
	Name    string     `json:"name" `
	Dob     *time.Time `json:"dob" gorm:"default:now()"`
	PostsID string     `json:"posts_id" gorm:"unique"`
	Posts   []*Post    `json:"Posts" gorm:"many2many:Author_Post;constraint:OnUpdate:CASCADE,OnDelete:CASCADE"`

	CreatedAt int // Set to current time if it is zero on creating
	UpdatedAt int // Set to current unix seconds on updating or if it is zero on creating
	Deleted   gorm.DeletedAt
}

type Blog struct {
	ID   int    `json:"id" gorm:"autoIncrement; primaryKey"`
	Text string `json:"text" `

	CreatedAt int // Set to current time if it is zero on creating
	UpdatedAt int // Set to current unix seconds on updating or if it is zero on creating
	Deleted   gorm.DeletedAt
}

type Blogger struct {
	ID       int     `json:"id" gorm:"autoIncrement; primaryKey"`
	Username string  `json:"username" `
	BlogsID  string  `json:"blogs_id" gorm:"unique"`
	Blogs    []*Blog `json:"blogs" gorm:"foreignKey:ID;references:BlogsID"`
	Views    *int    `json:"views" gorm:"autoIncrement"`

	CreatedAt int // Set to current time if it is zero on creating
	UpdatedAt int // Set to current unix seconds on updating or if it is zero on creating
	Deleted   gorm.DeletedAt
}

type Meta struct {
	Count int `json:"count" `

	CreatedAt int // Set to current time if it is zero on creating
	UpdatedAt int // Set to current unix seconds on updating or if it is zero on creating
	Deleted   gorm.DeletedAt
}

type Notification struct {
	ID     int        `json:"id" gorm:"autoIncrement; primaryKey"`
	Date   *time.Time `json:"date" `
	Total  *int       `json:"total" gorm:"check:total > 0 "`
	Type   *string    `json:"type" `
	Status *Status    `json:"status" `

	CreatedAt int // Set to current time if it is zero on creating
	UpdatedAt int // Set to current unix seconds on updating or if it is zero on creating
	Deleted   gorm.DeletedAt
}

type Post struct {
	ID            int        `json:"id" gorm:"autoIncrement; primaryKey"`
	Title         string     `json:"title" `
	Text          *string    `json:"text" `
	DatePublished *time.Time `json:"datePublished" `

	CreatedAt int // Set to current time if it is zero on creating
	UpdatedAt int // Set to current unix seconds on updating or if it is zero on creating
	Deleted   gorm.DeletedAt
}

type Stat struct {
	ID        int `json:"id" gorm:"autoIncrement; primaryKey"`
	Views     int `json:"views" `
	Likes     int `json:"likes" `
	Retweets  int `json:"retweets" `
	Total     int `json:"total" `
	Responses int `json:"responses" `

	CreatedAt int // Set to current time if it is zero on creating
	UpdatedAt int // Set to current unix seconds on updating or if it is zero on creating
	Deleted   gorm.DeletedAt
}

type Tweet struct {
	ID       int       `json:"id" gorm:"autoIncrement; primaryKey"`
	Body     string    `json:"body" `
	Date     time.Time `json:"date" `
	AuthorID string    `json:"author_id" gorm:"unique"`
	Author   []*User   `json:"Author" gorm:"foreignKey:ID;references:AuthorID"`
	StatsID  string    `json:"stats_id" gorm:"unique"`
	Stats    []*Stat   `json:"Stats" gorm:"foreignKey:ID;references:StatsID"`
	Data     *string   `json:"Data" `

	CreatedAt int // Set to current time if it is zero on creating
	UpdatedAt int // Set to current unix seconds on updating or if it is zero on creating
	Deleted   gorm.DeletedAt
}

type User struct {
	ID        int    `json:"id" gorm:"autoIncrement; primaryKey"`
	Username  string `json:"username" `
	FirstName string `json:"first_name" `
	LastName  string `json:"last_name" `
	FullName  string `json:"full_name" `
	Name      string `json:"name" `
	AvatarURL string `json:"avatar_url" `

	CreatedAt int // Set to current time if it is zero on creating
	UpdatedAt int // Set to current unix seconds on updating or if it is zero on creating
	Deleted   gorm.DeletedAt
}

type Status string

const (
	StatusStarted    Status = "STARTED"
	StatusInprogress Status = "INPROGRESS"
	StatusCompleted  Status = "COMPLETED"
)

var AllStatus = []Status{
	StatusStarted,
	StatusInprogress,
	StatusCompleted,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusStarted, StatusInprogress, StatusCompleted:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func GetStructs() map[string]interface{} {

	structs := make(map[string]interface{}, 0)

	structs["Author"] = Author{}
	structs["Blog"] = Blog{}
	structs["Blogger"] = Blogger{}
	structs["Meta"] = Meta{}
	structs["Notification"] = Notification{}
	structs["Post"] = Post{}
	structs["Stat"] = Stat{}
	structs["Tweet"] = Tweet{}
	structs["User"] = User{}
	structs["Product"]=Product{}

	return structs
}
type Product struct {  
    ID       string `gorm:"primaryKey"`  
LanguageCode string `gorm:"primaryKey"`  
Code         string  
Name         string
}